File Path: app/members/code/layout.tsx
// app/members/code/layout.tsx

'use client';

import React, { useEffect, useState } from "react";
import { generateClient } from "aws-amplify/data";
import type { Schema } from "@/amplify/data/resource";
import TableOfContents from "@/components/TableOfContents";
import LessonNavigationLinks from "@/components/LessonNavigationLinks";

// Generate the Amplify client
const client = generateClient<Schema>();

interface LessonContentData {
  id: string;
  title: string;
  slug: string;
  isOrdered: boolean;
  orderIndex: number;
  // Add `docs` and `code` as optional in case they are null
  docs?: string | null;
  code?: string | null;
}

interface LayoutProps {
  children: React.ReactNode;
  params: { slug: string };
}

/**
 * Layout Component
 * ----------------
 * Fetches all lessons data and provides it to child components as props.
 */
const Layout: React.FC<LayoutProps> = ({ children, params }) => {
  const [sortedLessonOrder, setSortedLessonOrder] = useState<LessonContentData[]>([]);

  // Fetch lessons on mount and set them in state
  useEffect(() => {
    const fetchData = async () => {
      try {
        const { data: lessonOrderData } = await client.models.LessonContent.list({
          filter: { isOrdered: { eq: true } },
        });

        // Normalize and sort lessons
        const sortedOrder = (lessonOrderData || [])
          .map((lesson) => ({
            ...lesson,
            orderIndex: lesson.orderIndex ?? 0,
            docs: lesson.docs || "", // Handle potential null values for `docs`
            code: lesson.code || "", // Handle potential null values for `code`
          }))
          .sort((a, b) => a.orderIndex - b.orderIndex);

        setSortedLessonOrder(sortedOrder);
      } catch (error) {
        console.error('Error fetching lessons:', error);
      }
    };

    fetchData();
  }, [params.slug]);

  return (
    <div className="relative min-h-screen">
      {/* Table of Contents */}
      <div className="fixed top-0 w-full z-20">
        <TableOfContents sortedLessonOrder={sortedLessonOrder} />
      </div>
      {/* Main Content */}
      <div className="mt-32 p-6 max-w-3xl mx-auto">
        {/* Clone children and pass the sortedLessonOrder as prop */}
        {React.isValidElement(children) &&
          React.cloneElement(children, { lessons: sortedLessonOrder })}
      </div>
    </div>
  );
};

export default Layout;

---
File Path: app/members/code/generateStaticParams.ts
/**
 * File Path: @/app/members/code/[slug]/generateStaticParams.ts
 * 
 * Static Params Generation
 * ------------------------
 * Generates the parameters for the dynamic route pages based on lesson slugs.
 * Fetches data from the `LessonContent` model.
 */

import { generateClient } from "aws-amplify/data";
import type { Schema } from "@/amplify/data/resource";

// Generate the Amplify client
const client = generateClient<Schema>();

/**
 * generateStaticParams Function
 * -----------------------------
 * Generates the parameters for the dynamic route pages based on lesson slugs.
 * 
 * @returns {Promise<Array<{ slug: string }>>} An array of slug objects for dynamic route generation.
 */
export async function generateStaticParams(): Promise<Array<{ slug: string }>> {
  // Fetch all lesson entries
  const { data: lessons } = await client.models.LessonContent.list();

  // Generate slugs for pages
  return (lessons || []).map((item) => ({ slug: item.slug }));
}

---
File Path: app/members/code/page.tsx
"use client";

/**
 * File Path: @/app/members/code/page.tsx
 *
 * Member Code Page Component
 * --------------------------
 * This component displays a centralized table of contents for all dynamically generated pages
 * from the `LessonContent` model, with each lesson linked for easy navigation.
 */

import React, { useState, useEffect } from "react";
import { generateClient } from "aws-amplify/data";
import type { Schema } from "@/amplify/data/resource";
import TableOfContents from "@/components/TableOfContents";

// Generate the Amplify client
const client = generateClient<Schema>();

interface LessonContentData {
  slug: string;
  title: string;
  orderIndex: number; // Ensure this is always a number
}

/**
 * MemberCodePage Component
 * ------------------------
 * Fetches all lessons from `LessonContent` and displays a centralized table of contents.
 * The lessons are sorted by `orderIndex` and each lesson is linked for navigation.
 *
 * @component
 * @returns {JSX.Element} The rendered component displaying the table of contents.
 */
export default function MemberCodePage(): JSX.Element {
  const [lessons, setLessons] = useState<LessonContentData[]>([]);

  // Fetch lessons from the `LessonContent` model on component mount
  useEffect(() => {
    const fetchLessons = async () => {
      try {
        const { data: lessonsData } = await client.models.LessonContent.list({
          filter: { isOrdered: { eq: true } },
        });

        // Normalize and sort lessons by `orderIndex`
        const formattedLessons = (lessonsData || [])
          .map((item) => ({
            slug: item.slug,
            title: item.title,
            orderIndex: item.orderIndex ?? 0, // Ensure `orderIndex` is always a number
          }))
          .sort((a, b) => a.orderIndex - b.orderIndex); // Sort by `orderIndex`

        setLessons(formattedLessons);
      } catch (error) {
        console.error("Error fetching lesson data:", error);
      }
    };

    fetchLessons();
  }, []);

  return (
    <main className="w-full flex justify-center">
      <div className="w-full p-6 mt-16 max-w-3xl mx-auto">
        <h1 className="text-2xl font-bold mb-6 text-center">
          Centralized Table of Contents
        </h1>
        {/* Pass the `lessons` to `TableOfContents` for rendering */}
        <TableOfContents sortedLessonOrder={lessons} />
      </div>
    </main>
  );
}

---
File Path: app/members/code/[slug]/page.tsx
import React from 'react';
import Link from 'next/link';
import CodeBlock from '@/components/CodeBlock';
import { cookiesClient } from '@/utils/amplifyServerUtils';

interface PageProps {
  params: { slug: string };
}
/*
interface LessonContent {
  id: string;
  title: string;
  slug: string;
  code?: string;
  docs: string;
  isOrdered: boolean;
  orderIndex?: number;
  moreInfoUrl?: string;
}
  */

export default async function LessonPage({ params }: PageProps): Promise<JSX.Element> {
  const { slug } = params;

  // Fetch the lesson data based on the slug
  const { data: lessons, errors } = await cookiesClient.models.LessonContent.list({
    filter: { slug: { eq: slug } },
  });

  if (errors) {
    console.error('Error fetching lessons:', errors);
    return <div>Error loading lesson.</div>;
  }

  // Fetch ordered lessons
  const { data: lessonOrderData, errors: orderErrors } = await cookiesClient.models.LessonContent.list({
    filter: { isOrdered: { eq: true } },
  });

  if (orderErrors) {
    console.error('Error fetching lesson order data:', orderErrors);
    return <div>Error loading lessons.</div>;
  }

  // Normalize the lesson data
  const lesson = (lessons || [])[0] || null;

  if (!lesson) return <div>Lesson not found</div>;

  const sortedLessonOrder = (lessonOrderData || []).sort(
    (a, b) => (a.orderIndex || 0) - (b.orderIndex || 0)
  );

  const currentLessonIndex = sortedLessonOrder.findIndex((item) => item.slug === slug);
  const nextLesson = sortedLessonOrder[currentLessonIndex + 1];
  const prevLesson = sortedLessonOrder[currentLessonIndex - 1];

  return (
    <main className="p-6 max-w-3xl mx-auto">
      {/* Table of Contents */}
      <div className="mt-8">
        <h2 className="text-2xl font-bold mb-4">Table of Contents</h2>
        <ul className="space-y-2">
          {sortedLessonOrder.map((item, index) => (
            <li key={item.slug}>
              <Link href={`/members/code/${item.slug}`}>
                {index + 1}. {item.title}
              </Link>
            </li>
          ))}
        </ul>
      </div>
      {/* Title */}
      <h1 className="text-3xl font-bold mb-6">{lesson.title}</h1>

      {/* Documentation Section */}
      <div className="prose lg:prose-xl max-w-none">
        <div dangerouslySetInnerHTML={{ __html: lesson.docs }} />
      </div>

      {/* Code Section */}
      {lesson.code && (
        <div className="bg-gray-800 text-white p-4 rounded mt-6 relative">
          <CodeBlock code={lesson.code} language="javascript" />
        </div>
      )}

      {/* Navigation */}
      <div className="mt-8 flex justify-between">
        {prevLesson && (
          <Link href={`/members/code/${prevLesson.slug}`}>
            &larr; Previous: {prevLesson.title}
          </Link>
        )}
        {nextLesson && (
          <Link href={`/members/code/${nextLesson.slug}`}>
            Next: {nextLesson.title} &rarr;
          </Link>
        )}
      </div>
    </main>
  );
}

---